import type { PayloadAction } from '@reduxjs/toolkit';

import type { CounterSliceState } from './types';
import { createSlice } from '@reduxjs/toolkit';
import { SliceStatusName } from './types';
import { incrementAsync } from './thunks';

const initialState: CounterSliceState = {
  value: 0,
  status: SliceStatusName.IDLE,
};

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // reducers字段使我们能够定义reducers并生成相关的actions。
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit 允许我们在reducers中编写"可变"逻辑。
      // 它实际上并没有改变状态，因为它使用Immer库来检测变更，
      // 并基于这些变更生成全新的不可变状态。

      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // 使用 PayloadAction 类型声明 action.payload 的内容。
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },

  // extraReducers 字段允许 slice 处理在其他地方定义的动作，
  // 包括由createAsyncThunk生成的动作或来自其他 slice 的动作。

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = SliceStatusName.LOADING;
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = SliceStatusName.IDLE;
        state.value += action.payload;
      });
  },
});
