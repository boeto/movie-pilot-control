import type { PayloadAction } from '@reduxjs/toolkit';
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

import { fetchIdentityCount } from '@/service';

import type { CounterSliceState } from './types';
import { SliceStatusName } from './types';

import type { ReduxState, ReduxThunkAction } from '../../reducer';

const initialState: CounterSliceState = {
  value: 0,
  status: SliceStatusName.IDLE,
};

// thunk
const setIncrementAsync = createAsyncThunk(
  'counter/fetchIdentityCount',
  async (amount: number) => {
    const response = await fetchIdentityCount(amount);

    // thunkAPI.dispatch(setIncrementByAmount(amount));
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  },
);

const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // reducers字段使我们能够定义reducers并生成相关的actions。
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setIncrement: (state) => {
      // Redux Toolkit 允许我们在reducers中编写"可变"逻辑。
      // 它实际上并没有改变状态，因为它使用Immer库来检测变更，
      // 并基于这些变更生成全新的不可变状态。

      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes

      state.value += 1;
    },
    setDecrement: (state) => {
      state.value -= 1;
    },
    // 使用 PayloadAction 类型声明 action.payload 的内容。
    // Use the PayloadAction type to declare the contents of `action.payload`
    setIncrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },

  // extraReducers 字段允许 slice 处理在其他地方定义的动作，
  // 包括由createAsyncThunk生成的动作或来自其他 slice 的动作。

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(setIncrementAsync.pending, (state) => {
        state.status = SliceStatusName.LOADING;
      })
      .addCase(setIncrementAsync.fulfilled, (state, action) => {
        state.status = SliceStatusName.IDLE;
        state.value += action.payload;
      });
  },
});

// reducer
const counterReducer = counterSlice.reducer;

// state
const selectCount = (state: ReduxState) => {
  return state.counter.value;
};

// actions
const { setIncrement, setDecrement, setIncrementByAmount } =
  counterSlice.actions;

const setIncrementIfOddAsync =
  (amount: number): ReduxThunkAction =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState());

    const remainder = currentValue % 2;

    if (remainder === 1) {
      dispatch(setIncrementByAmount(amount));
    }
  };

export {
  counterReducer,
  selectCount,
  setDecrement,
  setIncrement,
  setIncrementAsync,
  setIncrementByAmount,
  setIncrementIfOddAsync,
};
